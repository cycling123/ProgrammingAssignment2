get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##A = matrix(c(2, 4, 3, 1),nrow=2,ncol=2)
##m <- x$getinverse()
##  if(!is.null(m)) {
##      message("getting cached data")
##      return(m)
##  }
##data <- x$get()
##m <- inverse(data, ...)
m<-solve(A)
## m<-solve(data)
## x$setinverse(m)
m
}
a=makeVector(matrix(c(2, 4, 3, 1),nrow=2,ncol=2))
a$get()
a$getinverse()
makeMatric <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##A = matrix(c(2, 4, 3, 1),nrow=2,ncol=2)
##m <- x$getinverse()
##  if(!is.null(m)) {
##      message("getting cached data")
##      return(m)
##  }
##data <- x$get()
##m <- inverse(data, ...)
m<-solve(A)
## m<-solve(data)
## x$setinverse(m)
m
}
a=makeMatrix(matrix(c(2, 4, 3, 1),nrow=2,ncol=2))
makeMatric <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##A = matrix(c(2, 4, 3, 1),nrow=2,ncol=2)
##m <- x$getinverse()
##  if(!is.null(m)) {
##      message("getting cached data")
##      return(m)
##  }
##data <- x$get()
##m <- inverse(data, ...)
m<-solve(A)
## m<-solve(data)
## x$setinverse(m)
m
}
makeMatric <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeMatric <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##A = matrix(c(2, 4, 3, 1),nrow=2,ncol=2)
##m <- x$getinverse()
##  if(!is.null(m)) {
##      message("getting cached data")
##      return(m)
##  }
##data <- x$get()
##m <- inverse(data, ...)
m<-solve(A)
## m<-solve(data)
## x$setinverse(m)
m
}
a=makeMatrix(matrix(c(2, 4, 3, 1),nrow=2,ncol=2))
makeMatric <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeMatric <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##A = matrix(c(2, 4, 3, 1),nrow=2,ncol=2)
##m <- x$getinverse()
##  if(!is.null(m)) {
##      message("getting cached data")
##      return(m)
##  }
##data <- x$get()
##m <- inverse(data, ...)
m<-solve(A)
## m<-solve(data)
## x$setinverse(m)
m
}
a=makeMatrix(matrix(c(2, 4, 3, 1),nrow=2,ncol=2))
a$get()
a$getinverse()
a$setinverse()
cachSolve(a)
cacheSolve(a)
a
makeMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeMatric <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheInverse <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##A = matrix(c(2, 4, 3, 1),nrow=2,ncol=2)
##m <- x$getinverse()
##  if(!is.null(m)) {
##      message("getting cached data")
##      return(m)
##  }
##data <- x$get()
##m <- inverse(data, ...)
m<-solve(A)
## m<-solve(data)
## x$setinverse(m)
m
}
a=makeMatrix(matrix(c(2, 4, 3, 1),nrow=2,ncol=2))
makeMatric <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheInverse <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##A = matrix(c(2, 4, 3, 1),nrow=2,ncol=2)
##m <- x$getinverse()
##  if(!is.null(m)) {
##      message("getting cached data")
##      return(m)
##  }
##data <- x$get()
##m <- inverse(data, ...)
m<-solve(A)
## m<-solve(data)
## x$setinverse(m)
m
}
a=makeMatrix(matrix(c(2, 4, 3, 1),nrow=2,ncol=2))
makeMatric <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheInverse <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##A = matrix(c(2, 4, 3, 1),nrow=2,ncol=2)
##m <- x$getinverse()
##  if(!is.null(m)) {
##      message("getting cached data")
##      return(m)
##  }
##data <- x$get()
##m <- inverse(data, ...)
m<-solve(A)
## m<-solve(data)
## x$setinverse(m)
m
}
a <- makeMatric(matrix(c(2, 4, 3, 1),nrow=2,ncol=3))
a$get()
a <- makeMatric(matrix(c(2, 4, 3, 1),nrow=2,ncol=2))
a$get()
a$getinverse()
cacheInverse(matrix(c(2, 4, 3, 1),nrow=2,ncol=2))
makeMatric <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheInverse <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##A = matrix(c(2, 4, 3, 1),nrow=2,ncol=2)
m <- x$getinverse()
##  if(!is.null(m)) {
##      message("getting cached data")
##      return(m)
##  }
##data <- x$get()
##m <- inverse(data, ...)
m<-solve(A)
## m<-solve(data)
## x$setinverse(m)
m
}
cacheInverse(matrix(c(2, 4, 3, 1),nrow=2,ncol=2))
a <- makeMatric(matrix(c(2, 4, 3, 1),nrow=2,ncol=2))
a$get()
a$getinverse()
cachemean(a)
cacheInverse(a)
makeMatric <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheInverse <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##A = matrix(c(2, 4, 3, 1),nrow=2,ncol=2)
m <- x$getinverse()
##  if(!is.null(m)) {
##      message("getting cached data")
##      return(m)
##  }
data <- x$get()
##m <- inverse(data, ...)
##m<-solve(A)
m<-solve(data)
## x$setinverse(m)
m
}
a <- makeMatric(matrix(c(2, 4, 3, 1),nrow=2,ncol=2))
a$get()
cacheInverse(a)
a$getinverse()
makeMatric <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheInverse <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##A = matrix(c(2, 4, 3, 1),nrow=2,ncol=2)
m <- x$getinverse()
##  if(!is.null(m)) {
##      message("getting cached data")
##      return(m)
##  }
data <- x$get()
##m <- inverse(data, ...)
##m<-solve(A)
m<-solve(data)
x$setinverse(m)
m
}
makeMatric <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheInverse <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##A = matrix(c(2, 4, 3, 1),nrow=2,ncol=2)
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
##m <- inverse(data, ...)
##m<-solve(A)
m<-solve(data)
x$setinverse(m)
m
}
a <- makeMatric(matrix(c(2, 4, 3, 1),nrow=2,ncol=2))
a$getinverse()
cacheInverse()
cacheInverse(a)
a$getinverse()
cacheInverse()
cacheInverse(a)
makeMatric <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheInverse <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##A = matrix(c(2, 4, 3, 1),nrow=2,ncol=2)
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
##m <- inverse(data, ...)
##m<-solve(A)
m<-solve(data)
x$setinverse(m)
m
}
a <- makeMatric(matrix(c(2, 4, 3, 1),nrow=2,ncol=2))
a$getinverse()
a$getinverse()
a <- makeMatric(matrix(c(2, 4, 3, 1),nrow=2,ncol=2))
a$getinverse()
a$get()
cacheInverse(a)
a$getinverse()
a$getinverse()
cacheInverse(a)
makeMatric <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULLinverse
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheInverse <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##A = matrix(c(2, 4, 3, 1),nrow=2,ncol=2)
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
##m <- inverse(data, ...)
##m<-solve(A)
m<-solve(data)
x$setinverse(m)
m
}
